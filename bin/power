#!/bin/sh
##
## Power Management Frontend Tool
## by Andriy Berestovskyy
##

BACKEND="10.3.210.166" ## storage

usage () {
    echo "Power Management Frontend Tool"
    echo "Usage:"
    echo "    Power on or show status of the specified host(s):"
    echo "        ${0##*/} {on|show|status} host1 [host2...]"
    echo
    echo "    Power off or reset specified host(s):"
    echo "        ${0##*/} [-f] {off|reset} [-f] host1 [host2...]"
    echo "               -f  force power off or reset (do not use soft actions)"
    echo
    echo "    Lock or unlock auto power management for the specified host(s):"
    echo "        ${0##*/} {lock|unlock} host1 [host2...]"
    echo
    echo "    Activate console to the specified host:"
    echo "        ${0##*/} console host"
    echo
    echo "    List all the hosts available in the specified project(s):"
    echo "        ${0##*/} list project1 [project2...]"
    echo
    echo "    Print backend usage information:"
    echo "        ${0##*/} help"
    echo "Example:"
    echo "    ${0##*/} on l3 l5"
    exit 1
}
log () {
    echo "==> ${0##*/}: ${*}"
}
error () {
    log "error ${*}"
    exit 1
}

run () {
    ssh ${BACKEND} "${*}"
    if [ "$?" -ne "0" ]; then
        error "running the backend command"
    fi
}

log_action () {
    local __act="${1}"
    local __hosts="${2}"
    local __soft="${3}"

    case "${__act}" in
    "on"|"off")
        __log="powering ${__act}"
        ;;
    "reset")
        __log="resetting"
        ;;
    "status"|"show")
        __log="quering status of"
        ;;
    "lock")
        __log="locking"
        ;;
    "unlock")
        __log="unlocking"
        ;;
    esac
    case "${__act}" in
    "reset"|"off")
        if [ -z "${__soft}" ]; then
            __log="${__log} (hard)"
        fi
        ;;
    esac
    log "${__log}:${__hosts}"
}

console_ipmi () {
    local __ip="${1}"
    local __login="${2}"
    local __pass="${3}"

    if [ -z "${__ip}" -o -z "${__login}" -o -z "${__pass}" ]; then
        error "starting IPMI console: no login/pass or IP found\n${__status}"
    fi
    if [ -z "$(which ipmitool)" ]; then
        error "starting IPMI console: no ipmitool found, run apt install ipmitool"
    fi
    log "activating IPMI console to" \
        "${__login}:${__pass}@${__ip}..."
    echo "Press Enter ~ . to terminate the connection."
    ipmitool -U ${__login} -P ${__pass} -H ${__ip} -I lanplus sol activate
    echo
}

console_mcu () {
    local __ip="${1}"
    local __port="${2}"
    __port=$(( ${__port} + 1 ))

    if [ -z "${__ip}" -o -z "${__port}" ]; then
        error "starting MCU console: no port or IP found\n${__status}"
    fi
    if [ -z "$(which telnet)" ]; then
        error "starting MCU console: no telnet found, run apt install telnet"
    fi
    log "activating MCU console to ${__ip}:${__port}..."
    echo "Press Ctrl+] then type quite to terminate the connection."
    telnet "${__ip}" "${__port}"
    echo
}

if [ "$#" -lt "1" -o "$1" = "-h" -o "$1" = "--help" ]; then
    usage
fi

HOSTS=""
ACTION=""
SOFT_OPT="--soft"

BACKEND_LIST=""
BACKEND_NAMES=""

## Process options
for OPT in ${*}; do
    case "${OPT}" in
    "-f")
        SOFT_OPT=""
        shift
        ;;
    *)
        if [ -z "${ACTION}" ]; then
            ACTION="${OPT}"
            shift
        else
            ## Convert partial host names to full names
            if [ -z "${BACKEND_LIST}" ]; then
                BACKEND_LIST=$(run pws --list | sort)
                BACKEND_NAMES=$(echo "${BACKEND_LIST}" | awk '{print $1}')
            fi
            __n1=$(echo "${BACKEND_NAMES}" | egrep -i "\b${OPT}")
            __n1_h=$(echo "${__n1}" | head -1)
            __n2=$(echo "${BACKEND_NAMES}" | egrep -i "${OPT}")
            __n2_h=$(echo "${__n2}" | head -1)
            if [ -z "${__n1}" ]; then
                __n1="${__n2}"
                __n1_h="${__n2_h}"
            fi
            ## Unresolved or ambigous host name
            if [ -z "${__n1}" -o "${__n1}" != "${__n1_h}" ]; then
                case "${OPT}" in
                ## Special case for builder
                "builder"|"build"*)
                    __n1="contrail_s5"
                    ;;
                *)
                    ## Just add the original name
                    __n1="${OPT}"
                    ;;
                esac
            fi
            if [ "${OPT}" != "${__n1}" ]; then
                log "resolved: ${OPT} to ${__n1}"
            fi
            HOSTS="${HOSTS} ${__n1}"
        fi
        ;;
    esac
done

case "${ACTION}" in
"li"*)
    ## Get the project name(s)
    PROJECTS="${HOSTS}"
    if [ -z "${PROJECTS}" ]; then
        PROJECTS="."
        log "listing all targets..."
    else
        PROJECTS=$(echo ${PROJECTS} | tr -s ' ' '|')
        log "listing ${PROJECTS}..."
    fi
    if [ -z "${BACKEND_LIST}" ]; then
        BACKEND_LIST=$(run pws --list | sort)
    fi
    echo "${BACKEND_LIST}" | egrep -i "\b(${PROJECTS})" \
        | awk '{
            if ($4) {
                unlock_time = "23:00:00";
                unlock_date = strftime("%Y-%m-%d");
                if ($3 > unlock_date || $4 > unlock_time)
                    printf "%-21s %-7s Locked by %s\n", $1, $2,
                        gensub(/.*\((.*)\).*/, "\\1", "g", $4);
                else
                    printf "%-21s %-7s %s\n", $1, $2, "Unlocked";
            } else {
                printf "%-21s %-7s %s\n", $1, $2, "Unlocked";
            }
        }'
    ;;
"h"*)
    ACTION="help"
    log "backend usage information:"
    run pws --${ACTION}
    ;;
*)
    if [ -z "${HOSTS}" ]; then
        error "getting host name"
    fi
    ## Pass the soft option for off and reset actions
    case "${ACTION}" in
    "c"*|"t"*)
        ACTION="console"
        __status=$(run pws --status ${HOSTS})
        if [ -z "${__status}" ]; then
            error "getting target status: ${HOSTS}"
        fi
        __ip=$(echo "${__status}" | grep -i '^IP:' | awk '{print $2}')
        __login=$(echo "${__status}" | grep -i 'login/pass:' | awk '{print $3}')
        __pass=${__login##*/}
        __login=${__login%%/*}
        __port=$(echo "${__status}" | grep -i 'port:' | awk '{print $2}')
        __type=$(echo "${__status}" | grep -i 'type:' | awk '{print $3}')

        case "${__type}" in
        ipmi) console_ipmi "${__ip}" "${__login}" "${__pass}";;
        cvmmcu) console_mcu "${__ip}" "${__port}";;
        *) error "starting console for target ${HOSTS}:" \
               "unsupported type ${__type}"
           ;;
        esac
        ;;
    "lo"*)
        ACTION="lock"
        log_action "${ACTION}" "${HOSTS}" ""
        run pws --${ACTION} ${HOSTS}
        ;;
    "on")
        log_action "${ACTION}" "${HOSTS}" ""
        run pws --${ACTION} ${HOSTS}
        ;;
    "of"*)
        ACTION="off"
        log_action "${ACTION}" "${HOSTS}" "${SOFT_OPT}"
        run pws ${SOFT_OPT} --${ACTION} ${HOSTS}
        ;;
    "r"*)
        ACTION="reset"
        log_action "${ACTION}" "${HOSTS}" "${SOFT_OPT}"
        run pws ${SOFT_OPT} --${ACTION} ${HOSTS}
        ;;
    "s"*)
        ACTION="status"
        log_action "${ACTION}" "${HOSTS}" ""
        run pws --${ACTION} ${HOSTS}
        ;;
    "u"*)
        ACTION="unlock"
        log_action "${ACTION}" "${HOSTS}" ""
        run pws --${ACTION} ${HOSTS}
        ;;
    esac
    ;;
esac
log "done."
