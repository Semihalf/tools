#!/bin/sh
##
## Setup a New SSH Passwordless Access
## by Andriy Berestovskyy
##

## Default password to try first
DEF_PASS="root"

REQUIRE="sshpass"

usage () {
    echo "Setup a New SSH Passwordless Access"
    echo "Requirements:"
    echo "    apt install ${REQUIRE}"
    echo
    echo "Usage:"
    echo "    ${0##*/} [-c][-s] host1 [host2...]"
    echo "        -c  do not copy SSH ID, just clear the known hosts file"
    echo "        -s  just set up a new SSH key (do not clear known hosts)"
    echo "Example:"
    echo "    ${0##*/} l4 root@l5"
    exit 1
}
log () {
    echo "==> ${0##*/}: ${*}"
}
error () {
    log "error ${*}"
    exit 1
}

if ! which ${REQUIRE} > /dev/null 2>&1; then
    error "checking the requirements, please run:\n    apt install ${REQUIRE}"
fi

CLEAR_ONLY=""
SSH_KEY_ONLY=""
while getopts ":chs" OPT; do
    case "${OPT}" in
    "h"|"?") usage;;
    "c") CLEAR_ONLY="YES";;
    "s") SSH_KEY_ONLY="YES";;
    esac
done
shift $(expr ${OPTIND} - 1)

if [ "$#" -eq "0" ]; then
    usage
fi

NEW_SSH=""
case $(ssh -V 2>&1) in
OpenSSH_6*) NEW_SSH="YES" ;;
OpenSSH_7*) NEW_SSH="YES" ;;
esac

while [ -n "${1}" ]; do
    HOST=${1##*@}
    USERNAME=${1%%@*}
    if [ "${USERNAME}" = "${1}" ]; then
        USERNAME="${USER}"
    fi
    shift

    if [ -z "${SSH_KEY_ONLY}" ]; then
        HOST_IP=$(getent hosts ${HOST} | cut -d ' ' -f 1 | head -1)
        log "clearing ${HOST} from known hosts..."
        ssh-keygen -R ${HOST}
        if [ -n "${HOST_IP}" ]; then
            log "clearing ${HOST_IP} from known hosts"
            ssh-keygen -R ${HOST_IP}
        fi
    fi

    if [ -z "${CLEAR_ONLY}" ]; then
        sshpass -p "" ssh -q -o StrictHostKeyChecking=no \
                -o ConnectTimeout=1 ${USERNAME}@${HOST} exit
        if [ "$?" = "0" ]; then
            log "passwordless SSH access to ${USERNAME}@${HOST} is OK"
        else
            log "copying SSH ID to ${USERNAME}@${HOST} using default password..."
            if [ -n "${NEW_SSH}" ]; then
                sshpass -p "${DEF_PASS}" \
                    ssh-copy-id -o StrictHostKeyChecking=no -o ConnectTimeout=1 \
                        ${USERNAME}@${HOST}
            else
                sshpass -p "${DEF_PASS}" \
                    ssh-copy-id "-o StrictHostKeyChecking=no -o ConnectTimeout=1 \
                        ${USERNAME}@${HOST}"
            fi
            sshpass -p "" ssh -q -o StrictHostKeyChecking=no \
                    -o ConnectTimeout=1 ${USERNAME}@${HOST} exit
            if [ "$?" = "0" ]; then
                log "passwordless SSH access to ${USERNAME}@${HOST} is OK now"
            else
                log "copying SSH ID to ${USERNAME}@${HOST} with password prompt..."
                if [ -n "${NEW_SSH}" ]; then
                    ssh-copy-id -o StrictHostKeyChecking=no -o ConnectTimeout=1 \
                        ${USERNAME}@${HOST}
                else
                    ssh-copy-id "-o StrictHostKeyChecking=no -o ConnectTimeout=1 \
                        ${USERNAME}@${HOST}"
                fi
            fi
        fi
    fi
done

log "done."
