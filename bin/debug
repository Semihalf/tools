#!/bin/sh
##
## Debug Helper
## by Andriy Berestovskyy
##

log () {
    echo "    ${*}"
}
begin () {
    echo "==> ${*}"
}
error () {
    begin "Error ${*}"
    exit 1
}
usage () {
    echo "Debug Helper"
    echo "Usage:"
    echo "    To attach to a running process:"
    echo "    ${0##*/} <process_name> [regexp_to_backtrace]"
    echo "        process_name  grep expression to find the process"
    echo "    To analyse a core dump:"
    echo "    ${0##*/} <core_dump>"
    echo "        core_dump     core dump file"
    echo "Example:"
    echo "    ${0##*/} dpdk"
    exit 1
}

if [ "$#" -lt "1" -o "${1}" = "-h" -o "${1}" = "--help" ]; then
    usage
fi

## Try to open a core dump file
CORE_DUMP="${1}"
if [ -s "${CORE_DUMP}" ]; then
    begin "Analyzing core dump ${CORE_DUMP}..."
    binary=$(echo "q" | gdb /bin/ls "${CORE_DUMP}" 2>/dev/null | grep "Core was generated by" | cut -d '\`' -f 2 | cut -d "'" -f 1 | cut -d ' ' -f 1)
    if [ -z "${binary}" ]; then
        error "analyzing core dump: ${CORE_DUMP} does not look like a core dump"
    fi
    if [ ! -f "${binary}" ]; then
        error "analyzing core dump: binary file ${binary} not found"
    fi
    gdb ${binary} ${CORE_DUMP}
    exit 0
fi


PROCESS="${1}"
begin "Attaching gdb to process ${PROCESS}..."

PS=$(ps axww | awk '{print $1, $5}' | grep "${PROCESS}" | head -1)
PID=$(echo "${PS}" | awk '{print $1}')
PROG=$(echo "${PS}" | awk '{print $2}')
if [ -z "${PID}" -o -z "${PROG}" ]; then
    error "attaching gdb: process ${PROCESS} is not found"
fi

shift
BT=""
BT_PRINT="$*"
while [ "$#" -gt "0" ]; do
    BT="${BT} -e $1"
    shift
done

if [ -z "${BT}" ]; then
    log "attaching to ${PROG}[${PID}]..."
    gdb "${PROG}" "${PID}"
    exit 0
fi

log "BT: ${BT} / ${PROG}"
TMP_FILE=$(mktemp)
readelf -s ${PROG} | grep ${BT} | awk '{
    if($4 == "FUNC" && $2 != 0) {
        print "# code for " $NF;
        print "b *0x" $2;
        print "commands";
        print "silent";
        print "bt 1";
        print "c";
        print "end";
        print "";
    }
}' > "${TMP_FILE}"

log "attaching to ${PROG}[${PID}] backtracing ${BT_PRINT}"
gdb --command="${TMP_FILE}" "${PROG}" "${PID}"
rm -f "${TMP_FILE}"
